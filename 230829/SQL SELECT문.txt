SQL SELECT문
데이터 베이스에서 정보를 검색하는데 사용되는 코드

1. SELECT절 : SELECT문의 시작을 담당. 어떤 열을 반환할건지 지정한다. SELECT* : 모든 열
2. FROM절 : 어떤 테이블에서 데이터를 검색할 것인지 지정, 마지막을 담당
3. WHERE절 : 특정 조건을 만족하는 행을 선택하도록 필터링
4. ORDER BY절 : 정렬 순서 지정
5. GROUP BY절 : 특정 열에 따라서 그룹화
6. HAVING절 : GROUP BY 친구, 같이 써야 한다. GROUP BY에서 추가 필터링을 도와준다.

- SELECT절
SELECT column1, column2, column3,..., columnN
해당 column 반환하고 하는 테이블 열의 이름이다.

- FROM절
FROM table1, table2, table3, ...
해당 table 내에서 데이터를 검색하고자 한다.

SELECT table1.columnN, table2.columnN -> 테이블 객체가 맞구나
FROM table1, table2;

- DISTINCT 키워드
중복된 결과를 제거하고 고유한(unique) 결과만을 반환하는데 사용된다.
SELECT절에서 column앞에 작성을 한다.
SELECT DISTINCT column1, column2, ..., columnN

- ORDER BY 절
특정 열 또는 여러 열에 따라서 정렬해준다.
기본적으로 오름차순(ASC), 내림차순(DESC)을 사용하려면 DESC 키워드를 사용해야 한다.

SELECT column1, column2, ..., columnN
FROM table
ORDER BY column1 ASC, column2 DESC, ... columnN ASC;

순서대로, column1 기준 정렬, column2 기준 .. 동일한 앞의 값에 대해 뒤의 조건으로 정렬한다.

# 직원 이름 순서대로 정렬해서 부서코드랑 같이 출력

- WHERE 절
필터링 -> 조건식 -> 만족하는 행만이 결과에 포함된다.
SELECT column1, column2, ..., columnN
FROM table
ORDER BY condition;

SELECT *
FROM table
WHERE age > 30 AND age < 50;

- GROUP BY 절
보통 집계함수와 함께 사용되어 그룹화해주거나 계산해주는데 사용된다.

SELECT column1, column2, ..., fuction(columnN)
FROM table
GROUP BY column1, column2;

column1, column2 해당 열에서 columnN 열을 fuction 계산을 한다.

SELECT id, ..., AVG(salary)
FROM table
GROUP BY id, name;

테이블에서 각 id, name의 평균 급여를 계산하는 쿼리다.

WHERE절 이후에 위치하고, ORDER BY절 뒤에 위치한다.

WHERE
GROUP BY
ORDER BY

# 부서별, 직급별로 평균 급여를 계산

비교연산자
>,<,<=,>=,=,!=

NOT 연산자, AND, OR

BETWEEN ... AND ... : 특정 범위 내에 있는 값 선택
1 < a < 100 -> WHERE a BETWEEN 1 AND 100;

IN -> WHERE a IN ('개발','디자인','영업')

LIKE : 문자열 패턴 매칭 %와 같이 사용한다.
%는 임의의 문자열을 대체하고, _ 임의의 한개 문자를 대체한다.
_A% : 두번째 글자가 A인 모든 값
WHERE name LIKE _A%

IS NULL, IS NOT NULL : NULL인지 아닌지 판단

- HAVING절
GROUP BY 추가 필터링

SELECT column1, column2, ..., function(columnN)
FROM table
GROUP BY column1, column2
HAVING condition;

# 부서별, 직급별로 평균 급여를 계산 그중 3000이하인 애들만

연산 기법
1. 셀렉션(Selection)
특정 조건을 만족하는 행을 선택하는 연산
SQL에서는 WHERE 절을 사용을 해서 셀렉션을 한다.

2. 프로젝션(Projection)
특정 열만 선택하는 연산
SELECT column1, column2...

3. 조인(Join)
여러 개의 테이블에서 관련있는 데이터를 결합하는 연산
JOIN ... ON ...

SELECT emp.first_name, emp.last_name, dept.deptname
FROM emp
JOIN dept ON emp.id = dept.id;

# 부서 번호가 20이거나 직업이 SALESMAN인 사원 정보 출력
# 직업이 'MANAGER', 'SALESMAN', 'CLERK' 들이 아닌 사원 정보 출력
# 직업에 'A'가 들어간 사원 정보 출력
# 추가수당이 없는 사원 정보 출력
# 지역이 NEW YORK이고 직업이'SALESMAN'인 사원 정보 출력

# 총 수입 월급*12 + 추가수당
# 연간 총 수입이 30000 이상인 사원의 이름 출력
# 연간 총 수입 출력해줄 열을 생성해서 총 수입 TOTAL_SALARY출력 (SAL:월급)


자료형
CHAR(n) : n(길이)만큼의 문자열, 메모리 공간 고정

VARCHAR(n), VARCHAR2(n) : n(길이)만큼의 문자열, 메모리 공간 가변

NUMBER(a,b) : a -> 몇자리 수?   /   b - > 소수점 아래 몇자리 수?
    NUMBER(4) - > 9999 : 전체 4자리 수
    NUMBER(4,1) - > 999.9 : 소수점 포함 4자리 수

DATA : 날짜형식 세기, 연, 월, 일, 시, 분, 초 변환가능
    BLOB : 2진 데이터
    CLOB : 대용량 텍스트
    BFILE : 파일



집합 연산자
1. UNION : 
두 개의 SELECT문 결과를 결합한다. 중복된 행도 제거한다
    조건 : SELECT문 동일한 수의 열을 가져야하고, 유사한 데이터 타입을 가져야 한다. 
    SELECT column1 FROM table1
    UNION
    SELECT column2 FROM table2

    실습: 사원 번호, 이름, 직급, 급여, 부서넘버 출력. (부서번호 20, 급여 2000 이상, 부서번호 30, 급여 2000이상)

2. UNION ALL :
여러 개 SELECT문 결과를 결합한다. 중복된 행을 제거하지 않는다. 
    SELECT column1 FROM table1
    UNION ALL
    SELECT column2 FROM table2

3. INTERSECT : 
두 개의 SELECT문의 결과 중 공통된 행만 반환한다. 
    SELECT column1 FROM table1
    INTERSECT
    SELECT column2 FROM table   

4. EXCEPT (일부 MINUS) : 
첫 번째 SELECT문의 결과에서 두 번째 SELECT문의 결과에 있는 행들을 제외하고 나머지만 반환한다. 
    SELECT column1 FROM table1
    EXCEPT
    SELECT column2 FROM table   
